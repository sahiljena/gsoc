"use strict";(self.webpackChunkgosc_2021=self.webpackChunkgosc_2021||[]).push([[8845],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9033:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={title:"Week 1",author:"Omar AbdelSamea"},s=void 0,c={unversionedId:"2021/microservice/updates/2021-06-07",id:"2021/microservice/updates/2021-06-07",isDocsHomePage:!1,title:"Week 1",description:"\x3c!--",source:"@site/docs/2021/microservice/updates/2021-06-07.md",sourceDirName:"2021/microservice/updates",slug:"/2021/microservice/updates/2021-06-07",permalink:"/gsoc/docs/2021/microservice/updates/2021-06-07",editUrl:"https://github.com/fossology/gsoc/edit/main/docs/2021/microservice/updates/2021-06-07.md",tags:[],version:"current",frontMatter:{title:"Week 1",author:"Omar AbdelSamea"},sidebar:"2021",previous:{title:"Introduction",permalink:"/gsoc/docs/2021/microservice/"},next:{title:"Week 2",permalink:"/gsoc/docs/2021/microservice/updates/2021-06-15"}},u=[{value:"Meeting 0",id:"meeting-0",children:[{value:"Organizer",id:"organizer",children:[]},{value:"Attendees",id:"attendees",children:[]},{value:"Outcomes",id:"outcomes",children:[]}]},{value:"Meeting 1",id:"meeting-1",children:[{value:"Organizer",id:"organizer-1",children:[]},{value:"Attendees",id:"attendees-1",children:[]},{value:"Outcomes",id:"outcomes-1",children:[]}]},{value:"Creating network using docker-compose",id:"creating-network-using-docker-compose",children:[{value:"Issues",id:"issues",children:[]}]},{value:"End of the week results",id:"end-of-the-week-results",children:[]}],d={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"coding-week-1"},"Coding Week 1"),(0,a.kt)("h2",{id:"meeting-0"},"Meeting 0"),(0,a.kt)("h3",{id:"organizer"},"Organizer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Gaurav Mishra")),(0,a.kt)("h3",{id:"attendees"},"Attendees"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Anupam Ghosh"),(0,a.kt)("li",{parentName:"ul"},"Ayush Bharadwaj"),(0,a.kt)("li",{parentName:"ul"},"Vasudev Maduri"),(0,a.kt)("li",{parentName:"ul"},"Kaushlendra Singh"),(0,a.kt)("li",{parentName:"ul"},"Shreya Pratap"),(0,a.kt)("li",{parentName:"ul"},"Omar AbdelSamea")),(0,a.kt)("h3",{id:"outcomes"},"Outcomes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Gaurav illustrated how scheduler starts agents and the communication between them."),(0,a.kt)("li",{parentName:"ul"},"Discussed how the db container should be implemented and the process of installing FOSSology schema inside the container.")),(0,a.kt)("h2",{id:"meeting-1"},"Meeting 1"),(0,a.kt)("h3",{id:"organizer-1"},"Organizer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Gaurav Mishra")),(0,a.kt)("h3",{id:"attendees-1"},"Attendees"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Anupam Ghosh"),(0,a.kt)("li",{parentName:"ul"},"Ayush Bharadwaj"),(0,a.kt)("li",{parentName:"ul"},"Vasudev Maduri"),(0,a.kt)("li",{parentName:"ul"},"Kaushlendra Singh"),(0,a.kt)("li",{parentName:"ul"},"Shreya Pratap"),(0,a.kt)("li",{parentName:"ul"},"Omar AbdelSamea")),(0,a.kt)("h3",{id:"outcomes-1"},"Outcomes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Discussed the issues while trying to setup Docker-compse."),(0,a.kt)("li",{parentName:"ul"},"Discussed a possible implementation of communication between the scheduler and agents.")),(0,a.kt)("h2",{id:"creating-network-using-docker-compose"},"Creating network using docker-compose"),(0,a.kt)("h3",{id:"issues"},"Issues"),(0,a.kt)("p",null,"1- While trying to connect the scheduler container with db container using docker-compose. the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-entrypoint")," have ",(0,a.kt)("inlineCode",{parentName:"p"},"fo-postinstall")," inside it to install FOSSology db schema inside the db container, but ",(0,a.kt)("inlineCode",{parentName:"p"},"core-schema.dat")," wasn't found inside the scheduler container."),(0,a.kt)("h4",{id:"solution"},"Solution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"core-schema.dat")," is found inside ",(0,a.kt)("inlineCode",{parentName:"li"},"fossology-web.deb")," hence this package is installed inside the scheduler container. Better solution will be provided in the future as the required file ",(0,a.kt)("inlineCode",{parentName:"li"},"core-schema.dat")," could be copied to the container in the Dockerfile.")),(0,a.kt)("p",null,"2- nomos container exits immediately and it returns ",(0,a.kt)("strong",{parentName:"p"},"status code 0"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"exec /usr/sbin/sshd -D")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"exec /bin/bash")," both added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-entrypoint")," to keep the container running but it didn't work."),(0,a.kt)("h2",{id:"end-of-the-week-results"},"End of the week results"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Created a separate container for PostgreSQL database"),(0,a.kt)("li",{parentName:"ul"},"Solved the issues between the scheduler and database, checked all missing dependencies for correct starting of all containers and configured the ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-entrypoint.sh")," to work with all the separate containers"),(0,a.kt)("li",{parentName:"ul"},"Started a network using docker-compose with the new Dockerfiles between scheduler, UI and database."),(0,a.kt)("li",{parentName:"ul"},"Started the initial implemntation of K8s cluster.")))}p.isMDXComponent=!0}}]);