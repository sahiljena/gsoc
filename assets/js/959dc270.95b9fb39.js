"use strict";(self.webpackChunkgosc_2021=self.webpackChunkgosc_2021||[]).push([[4211],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7510:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={sidebar_position:3,title:"Building FOSSology"},s=void 0,p={unversionedId:"2021/buildsystem/build",id:"2021/buildsystem/build",isDocsHomePage:!1,title:"Building FOSSology",description:"\x3c!--",source:"@site/docs/2021/buildsystem/build.md",sourceDirName:"2021/buildsystem",slug:"/2021/buildsystem/build",permalink:"/gsoc/docs/2021/buildsystem/build",editUrl:"https://github.com/fossology/gsoc/edit/main/docs/2021/buildsystem/build.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Building FOSSology"},sidebar:"2021",previous:{title:"Week 10",permalink:"/gsoc/docs/2021/buildsystem/updates/2021-08-13"},next:{title:"First Evaluation",permalink:"/gsoc/docs/2021/buildsystem/first-evaluation"}},u=[],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Install CMake if you haven't already (minimum 3.10 required)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"    sudo apt install CMake # for Debian based systems\n")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Since the new build system is still in review. You must fork\nFOSSology and pull the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fossology/fossology/pull/2075"},"#","2075")," pull\nrequest branch. Once you are in FOSSology root, run these commands."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git fetch https://github.com/avinal/fossology avinal/feat/buildsystem:buildsystem\ngit checkout buildsystem\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The first step towards building is to create a temporary directory\nfor storing intermediate files and build artifacts. By convention we\nuse a directory named ",(0,l.kt)("inlineCode",{parentName:"p"},"build"),", but you can use any\nname. (",(0,l.kt)("strong",{parentName:"p"},"NOTE: For testing do not use other names"),")"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir build\ncd build\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"In the next steps, we will configure the CMake project and generate\nthe required configurations. You can use several flags to control\nthe build. Given below are the flags available for this project."))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"CMake Flags"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"-DCMAKE_INSTALL_PREFIX=<path",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Sets the install prefix."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/usr/local"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},'-DAGENTS="agent1;agent2..."')),(0,l.kt)("td",{parentName:"tr",align:null},"Only configure these agents."),(0,l.kt)("td",{parentName:"tr",align:null},"ALL AGENTS")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"-DOFFLINE=<ON/OFF",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls vendor generation, ON=NO"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"OFF"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"-DCMAKE_BUILD_TYPE=<type",">")),(0,l.kt)("td",{parentName:"tr",align:null},"-   ",(0,l.kt)("inlineCode",{parentName:"td"},"Debug"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Release"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"RelWithDebInfo"),",",(0,l.kt)("inlineCode",{parentName:"td"},"MinSizeRel")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Debug"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"-DTESTING=<ON/OFF",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Controls testing config generation"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"OFF"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"-DMONOPACK=<ON/OFF",">")),(0,l.kt)("td",{parentName:"tr",align:null},"Package adj2nest and ununpack seperately"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"OFF"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"-GNinja")),(0,l.kt)("td",{parentName:"tr",align:null},"Use Ninja instead of Unix Makefiles"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Unix MakeFiles"))))),(0,l.kt)("p",null,"There are lots of inbuilt CMake command-line options you can see them in the official ",(0,l.kt)("a",{parentName:"p",href:"https://cmake.org/cmake/help/v3.10/manual/cmake.1.html"},"documentation"),". Once you have chosen your flags we can now configure the project using the following commands."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# From build folder\ncd <name-of-build-directory>\ncmake <flags> ..\n")),(0,l.kt)("p",null,"4 .  The next step is to build the project. You can use parallel jobs to build faster. For more options you can type ",(0,l.kt)("inlineCode",{parentName:"p"},"cmake --help")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"make --help")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ninja --help"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Common build command for all generators,\n# Default number of parallel builds depends on generator used\ncmake --build . --parallel <no-of-processes>\n\n# For Unix Makefiles, no parallel build by default\nmake -j <no-of-processes>\n\n# For Ninja, 8+ parallel build by default (depends on system)\nninja -j <no-of-processes>\n")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Installing is also as easy as building. You can choose to install\nonly certain components even if you have built the whole project. If\nyou directly invoke the install command without building the\nproject, it will automatically build the project first."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# For Unix Makefiles\nmake install\n\n# For Ninja\nninja install\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"While testing has some issues, but most of the testing is working\nfine. For now, you must build and run any test from the FOSSology\nroot directory only. You can choose to configure a single agent if\nyou want to test one agent only. See ",(0,l.kt)("inlineCode",{parentName:"p"},"ctest --help")," for\ncontrolling test runs."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Common testing command\nctest --parallel <no-of-processes>\n\n# For Unix Makefiles\nmake test\n\n# For Ninja\nninja test\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"You can package FOSSology, the packaging currently lacks copyright\nand conf files. But for testing purposes, you can use the following\ncommands. Similar to installing, if you run the package command\nwithout building the project, it will automatically build the\nproject first. See ",(0,l.kt)("inlineCode",{parentName:"p"},"cpack --help")," for more packaging\noptions."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Common testing command\ncpack\n\n# For Unix Makefiles\nmake package\n\n# For Ninja\nninja package\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Some targets are not built by default, you can manually trigger their build by running ",(0,l.kt)("inlineCode",{parentName:"p"},"make ,target-name>")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ninja <target-name>"),". You can list all the targets by running ",(0,l.kt)("inlineCode",{parentName:"p"},"make help")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ninja -t targets"),".")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"You can also use ",(0,l.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/cpp/cmake-linux"},"CMake EXtension for VS Code")," for seamlessly populating and building targets. Can also use gitpod.io for quick setup"))))}c.isMDXComponent=!0}}]);